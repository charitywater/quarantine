# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `googleauth` gem.
# Please instead update this file by running `bin/tapioca gem googleauth`.

# typed: true

module Google; end

module Google::Auth
  private

  def get_application_default(scope = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    def get_application_default(scope = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Google::Auth::ClientId
  def initialize(id, secret); end

  def id; end
  def secret; end

  class << self
    def default; end
    def default=(_arg0); end
    def from_file(file); end
    def from_hash(config); end
  end
end

Google::Auth::ClientId::CLIENT_ID = T.let(T.unsafe(nil), String)
Google::Auth::ClientId::CLIENT_SECRET = T.let(T.unsafe(nil), String)
Google::Auth::ClientId::INSTALLED_APP = T.let(T.unsafe(nil), String)
Google::Auth::ClientId::MISSING_TOP_LEVEL_ELEMENT_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::ClientId::WEB_APP = T.let(T.unsafe(nil), String)

class Google::Auth::Credentials
  extend ::Forwardable

  def initialize(keyfile, options = T.unsafe(nil)); end

  def audience(*args, &block); end
  def client; end
  def client=(_arg0); end
  def issuer(*args, &block); end
  def project_id; end
  def quota_project_id; end
  def scope(*args, &block); end
  def signing_key(*args, &block); end
  def target_audience(*args, &block); end
  def token_credential_uri(*args, &block); end
  def updater_proc(*args, &block); end

  protected

  def client_options(options); end
  def init_client(keyfile, connection_options = T.unsafe(nil)); end
  def stringify_hash_keys(hash); end
  def update_from_filepath(path, options); end
  def update_from_hash(hash, options); end
  def update_from_signet(client); end
  def verify_keyfile_exists!(keyfile); end
  def verify_keyfile_provided!(keyfile); end

  class << self
    def audience; end
    def audience=(new_audience); end
    def default(options = T.unsafe(nil)); end
    def env_vars; end
    def env_vars=(new_env_vars); end
    def env_vars_internal; end
    def lookup_auth_param(name, method_name = T.unsafe(nil)); end
    def lookup_local_constant(name); end
    def paths; end
    def paths=(new_paths); end
    def paths_internal; end
    def scope; end
    def scope=(new_scope); end
    def target_audience; end
    def target_audience=(new_target_audience); end
    def token_credential_uri; end
    def token_credential_uri=(new_token_credential_uri); end

    private

    def from_application_default(options); end
    def from_default_paths(options); end
    def from_env_vars(options); end
    def from_io(io, options); end
  end
end

Google::Auth::Credentials::AUDIENCE = T.let(T.unsafe(nil), String)
Google::Auth::Credentials::TOKEN_CREDENTIAL_URI = T.let(T.unsafe(nil), String)

module Google::Auth::CredentialsLoader
  extend ::Memoist

  def from_env(scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def from_system_default_path(scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def from_well_known_path(scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def make_creds(*args); end

  private

  def authorized_user_env_vars?; end
  def interpret_options(scope, options); end
  def load_gcloud_project_id; end
  def service_account_env_vars?; end
  def warn_if_cloud_sdk_credentials(client_id); end

  class << self
    def load_gcloud_project_id; end
    def memoized_methods; end
    def warn_if_cloud_sdk_credentials(client_id); end
  end
end

Google::Auth::CredentialsLoader::ACCOUNT_TYPE_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CLIENT_EMAIL_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CLIENT_ID_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CLIENT_SECRET_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CLOUD_SDK_CLIENT_ID = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CLOUD_SDK_CREDENTIALS_WARNING = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::CREDENTIALS_FILE_NAME = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::ENV_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::GCLOUD_CONFIG_COMMAND = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::GCLOUD_POSIX_COMMAND = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::GCLOUD_WINDOWS_COMMAND = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::NOT_FOUND_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::PRIVATE_KEY_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::PROJECT_ID_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::REFRESH_TOKEN_VAR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::SYSTEM_DEFAULT_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::WELL_KNOWN_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::CredentialsLoader::WELL_KNOWN_PATH = T.let(T.unsafe(nil), String)

class Google::Auth::DefaultCredentials
  extend ::Google::Auth::CredentialsLoader

  class << self
    def determine_creds_class(json_key_io); end
    def make_creds(options = T.unsafe(nil)); end
    def read_creds; end
  end
end

class Google::Auth::GCECredentials < ::Signet::OAuth2::Client
  extend ::Memoist::InstanceMethods

  def fetch_access_token(options = T.unsafe(nil)); end

  class << self
    def _unmemoized_on_gce?(options = T.unsafe(nil)); end
    def compute_auth_token_uri; end
    def compute_check_uri; end
    def compute_id_token_uri; end
    def metadata_host; end
    def on_gce?(*args); end
  end
end

Google::Auth::GCECredentials::COMPUTE_AUTH_TOKEN_URI = T.let(T.unsafe(nil), String)
Google::Auth::GCECredentials::COMPUTE_CHECK_URI = T.let(T.unsafe(nil), String)
Google::Auth::GCECredentials::COMPUTE_ID_TOKEN_URI = T.let(T.unsafe(nil), String)
Google::Auth::GCECredentials::DEFAULT_METADATA_HOST = T.let(T.unsafe(nil), String)

module Google::Auth::IDTokens
  class << self
    def forget_sources!; end
    def iap_key_source; end
    def oidc_key_source; end
    def verify_iap(token, aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end
    def verify_oidc(token, aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end
  end
end

class Google::Auth::IDTokens::AggregateKeySource
  def initialize(sources); end

  def current_keys; end
  def refresh_keys; end
end

class Google::Auth::IDTokens::AudienceMismatchError < ::Google::Auth::IDTokens::VerificationError; end
class Google::Auth::IDTokens::AuthorizedPartyMismatchError < ::Google::Auth::IDTokens::VerificationError; end
class Google::Auth::IDTokens::ExpiredTokenError < ::Google::Auth::IDTokens::VerificationError; end

class Google::Auth::IDTokens::HttpKeySource
  def initialize(uri, retry_interval: T.unsafe(nil)); end

  def current_keys; end
  def refresh_keys; end
  def uri; end

  protected

  def interpret_json(_data); end
end

Google::Auth::IDTokens::HttpKeySource::DEFAULT_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)
Google::Auth::IDTokens::IAP_ISSUERS = T.let(T.unsafe(nil), Array)
Google::Auth::IDTokens::IAP_JWK_URL = T.let(T.unsafe(nil), String)
class Google::Auth::IDTokens::IssuerMismatchError < ::Google::Auth::IDTokens::VerificationError; end

class Google::Auth::IDTokens::JwkHttpKeySource < ::Google::Auth::IDTokens::HttpKeySource
  def initialize(uri, retry_interval: T.unsafe(nil)); end

  protected

  def interpret_json(data); end
end

class Google::Auth::IDTokens::KeyInfo
  def initialize(id: T.unsafe(nil), key: T.unsafe(nil), algorithm: T.unsafe(nil)); end

  def algorithm; end
  def id; end
  def key; end

  class << self
    def from_jwk(jwk); end
    def from_jwk_set(jwk_set); end

    private

    def ensure_json_parsed(input); end
    def extract_ec_key(jwk); end
    def extract_rsa_key(jwk); end
    def symbolize_keys(hash); end
  end
end

class Google::Auth::IDTokens::KeySourceError < ::StandardError; end
Google::Auth::IDTokens::OAUTH2_V3_CERTS_URL = T.let(T.unsafe(nil), String)
Google::Auth::IDTokens::OIDC_ISSUERS = T.let(T.unsafe(nil), Array)
class Google::Auth::IDTokens::SignatureError < ::Google::Auth::IDTokens::VerificationError; end

class Google::Auth::IDTokens::StaticKeySource
  def initialize(keys); end

  def current_keys; end
  def refresh_keys; end

  class << self
    def from_jwk(jwk); end
    def from_jwk_set(jwk_set); end
  end
end

class Google::Auth::IDTokens::VerificationError < ::StandardError; end

class Google::Auth::IDTokens::Verifier
  def initialize(key_source: T.unsafe(nil), aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end

  def verify(token, key_source: T.unsafe(nil), aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end

  private

  def decode_token(token, keys, aud, azp, iss); end
  def normalize_and_verify_payload(payload, aud, azp, iss); end
end

class Google::Auth::IDTokens::X509CertHttpKeySource < ::Google::Auth::IDTokens::HttpKeySource
  def initialize(uri, algorithm: T.unsafe(nil), retry_interval: T.unsafe(nil)); end

  protected

  def interpret_json(data); end
end

module Google::Auth::JsonKeyReader
  def read_json_key(json_key_io); end
end

Google::Auth::NOT_FOUND_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::NO_METADATA_SERVER_ERROR = T.let(T.unsafe(nil), String)

module Google::Auth::ScopeUtil
  class << self
    def as_array(scope); end
    def normalize(scope); end
  end
end

Google::Auth::ScopeUtil::ALIASES = T.let(T.unsafe(nil), Hash)

class Google::Auth::ServiceAccountCredentials < ::Signet::OAuth2::Client
  extend ::Google::Auth::CredentialsLoader
  extend ::Google::Auth::JsonKeyReader

  def initialize(options = T.unsafe(nil)); end

  def apply!(a_hash, opts = T.unsafe(nil)); end
  def enable_self_signed_jwt?; end
  def project_id; end
  def quota_project_id; end

  private

  def apply_self_signed_jwt!(a_hash); end

  class << self
    def make_creds(options = T.unsafe(nil)); end
    def unescape(str); end
  end
end

Google::Auth::ServiceAccountCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)

class Google::Auth::ServiceAccountJwtHeaderCredentials
  extend ::Google::Auth::CredentialsLoader
  extend ::Google::Auth::JsonKeyReader

  def initialize(options = T.unsafe(nil)); end

  def apply(a_hash, opts = T.unsafe(nil)); end
  def apply!(a_hash, opts = T.unsafe(nil)); end
  def project_id; end
  def quota_project_id; end
  def updater_proc; end

  protected

  def new_jwt_token(jwt_aud_uri = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    def make_creds(options = T.unsafe(nil)); end
  end
end

Google::Auth::ServiceAccountJwtHeaderCredentials::AUTH_METADATA_KEY = T.let(T.unsafe(nil), Symbol)
Google::Auth::ServiceAccountJwtHeaderCredentials::EXPIRY = T.let(T.unsafe(nil), Integer)
Google::Auth::ServiceAccountJwtHeaderCredentials::JWT_AUD_URI_KEY = T.let(T.unsafe(nil), Symbol)
Google::Auth::ServiceAccountJwtHeaderCredentials::SIGNING_ALGORITHM = T.let(T.unsafe(nil), String)
Google::Auth::ServiceAccountJwtHeaderCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)
Google::Auth::UNEXPECTED_ERROR_SUFFIX = T.let(T.unsafe(nil), String)

class Google::Auth::UserAuthorizer
  def initialize(client_id, scope, token_store, callback_uri = T.unsafe(nil)); end

  def get_and_store_credentials_from_code(options = T.unsafe(nil)); end
  def get_authorization_url(options = T.unsafe(nil)); end
  def get_credentials(user_id, scope = T.unsafe(nil)); end
  def get_credentials_from_code(options = T.unsafe(nil)); end
  def revoke_authorization(user_id); end
  def store_credentials(user_id, credentials); end

  private

  def monitor_credentials(user_id, credentials); end
  def redirect_uri_for(base_url); end
  def stored_token(user_id); end
  def uri_is_postmessage?(uri); end
end

Google::Auth::UserAuthorizer::MISMATCHED_CLIENT_ID_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::UserAuthorizer::MISSING_ABSOLUTE_URL_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::UserAuthorizer::NIL_CLIENT_ID_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::UserAuthorizer::NIL_SCOPE_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::UserAuthorizer::NIL_TOKEN_STORE_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::UserAuthorizer::NIL_USER_ID_ERROR = T.let(T.unsafe(nil), String)

class Google::Auth::UserRefreshCredentials < ::Signet::OAuth2::Client
  extend ::Google::Auth::CredentialsLoader

  def initialize(options = T.unsafe(nil)); end

  def includes_scope?(required_scope); end
  def project_id; end
  def revoke!(options = T.unsafe(nil)); end

  class << self
    def make_creds(options = T.unsafe(nil)); end
    def read_json_key(json_key_io); end
  end
end

Google::Auth::UserRefreshCredentials::AUTHORIZATION_URI = T.let(T.unsafe(nil), String)
Google::Auth::UserRefreshCredentials::REVOKE_TOKEN_URI = T.let(T.unsafe(nil), String)
Google::Auth::UserRefreshCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)

class Google::Auth::WebUserAuthorizer < ::Google::Auth::UserAuthorizer
  def initialize(client_id, scope, token_store, callback_uri = T.unsafe(nil)); end

  def get_authorization_url(options = T.unsafe(nil)); end
  def get_credentials(user_id, request = T.unsafe(nil), scope = T.unsafe(nil)); end
  def handle_auth_callback(user_id, request); end

  class << self
    def default; end
    def default=(_arg0); end
    def extract_callback_state(request); end
    def handle_auth_callback_deferred(request); end
    def validate_callback_state(state, request); end
  end
end

Google::Auth::WebUserAuthorizer::AUTHORIZATION_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::AUTH_CODE_KEY = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::CALLBACK_STATE_KEY = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::CURRENT_URI_KEY = T.let(T.unsafe(nil), String)

class Google::Auth::WebUserAuthorizer::CallbackApp
  def call(env); end

  class << self
    def call(env); end
  end
end

Google::Auth::WebUserAuthorizer::CallbackApp::ERROR_STATUS = T.let(T.unsafe(nil), Integer)
Google::Auth::WebUserAuthorizer::CallbackApp::LOCATION_HEADER = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::CallbackApp::REDIR_STATUS = T.let(T.unsafe(nil), Integer)
Google::Auth::WebUserAuthorizer::ERROR_CODE_KEY = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::INVALID_STATE_TOKEN_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::MISSING_AUTH_CODE_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::NIL_REQUEST_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::NIL_SESSION_ERROR = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::SCOPE_KEY = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::SESSION_ID_KEY = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::STATE_PARAM = T.let(T.unsafe(nil), String)
Google::Auth::WebUserAuthorizer::XSRF_KEY = T.let(T.unsafe(nil), String)

module Signet
  class << self
    def parse_auth_param_list(auth_param_string); end
  end
end

module Signet::OAuth2
  class << self
    def generate_authorization_uri(authorization_uri, parameters = T.unsafe(nil)); end
    def generate_basic_authorization_header(client_id, client_password); end
    def generate_bearer_authorization_header(access_token, auth_params = T.unsafe(nil)); end
    def parse_authorization_header(field_value); end
    def parse_basic_credentials(credential_string); end
    def parse_bearer_credentials(credential_string); end
    def parse_credentials(body, content_type); end
    def parse_oauth_challenge(challenge_string); end
    def parse_www_authenticate_header(field_value); end
  end
end

Signet::OAuth2::AUTH_METADATA_KEY = T.let(T.unsafe(nil), Symbol)

class Signet::OAuth2::Client
  def initialize(options = T.unsafe(nil)); end

  def access_token; end
  def access_token=(new_access_token); end
  def access_type; end
  def access_type=(new_access_type); end
  def additional_parameters; end
  def additional_parameters=(new_additional_parameters); end
  def apply(a_hash, opts = T.unsafe(nil)); end
  def apply!(a_hash, opts = T.unsafe(nil)); end
  def audience; end
  def audience=(new_audience); end
  def authorization_uri(options = T.unsafe(nil)); end
  def authorization_uri=(new_authorization_uri); end
  def build_default_connection; end
  def clear_credentials!; end
  def client_id; end
  def client_id=(new_client_id); end
  def client_secret; end
  def client_secret=(new_client_secret); end
  def code; end
  def code=(new_code); end
  def coerce_uri(incoming_uri); end
  def configure_connection(options); end
  def decoded_id_token(public_key = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end
  def expired?; end
  def expires_at; end
  def expires_at=(new_expires_at); end
  def expires_in; end
  def expires_in=(new_expires_in); end
  def expires_within?(sec); end
  def expiry; end
  def expiry=(new_expiry); end
  def extension_parameters; end
  def extension_parameters=(new_extension_parameters); end
  def fetch_access_token(options = T.unsafe(nil)); end
  def fetch_access_token!(options = T.unsafe(nil)); end
  def fetch_protected_resource(options = T.unsafe(nil)); end
  def generate_access_token_request(options = T.unsafe(nil)); end
  def generate_authenticated_request(options = T.unsafe(nil)); end
  def grant_type; end
  def grant_type=(new_grant_type); end
  def id_token; end
  def id_token=(new_id_token); end
  def issued_at; end
  def issued_at=(new_issued_at); end
  def issuer; end
  def issuer=(new_issuer); end
  def notify_refresh_listeners; end
  def on_refresh(&block); end
  def orig_fetch_access_token!(options = T.unsafe(nil)); end
  def password; end
  def password=(new_password); end
  def person; end
  def person=(new_person); end
  def principal; end
  def principal=(new_person); end
  def redirect_uri; end
  def redirect_uri=(new_redirect_uri); end
  def refresh!(options = T.unsafe(nil)); end
  def refresh_token; end
  def refresh_token=(new_refresh_token); end
  def retry_with_error(max_retry_count = T.unsafe(nil)); end
  def scope; end
  def scope=(new_scope); end
  def signing_algorithm; end
  def signing_key; end
  def signing_key=(new_key); end
  def state; end
  def state=(new_state); end
  def sub; end
  def sub=(_arg0); end
  def target_audience; end
  def target_audience=(new_target_audience); end
  def to_json(*_args); end
  def to_jwt(options = T.unsafe(nil)); end
  def token_credential_uri; end
  def token_credential_uri=(new_token_credential_uri); end
  def update!(options = T.unsafe(nil)); end
  def update_token!(options = T.unsafe(nil)); end
  def updater_proc; end
  def username; end
  def username=(new_username); end

  private

  def deep_hash_normalize(old_hash); end
  def normalize_timestamp(time); end
  def recursive_hash_normalize_keys(val); end
  def set_relative_expires_at(issued_at, expires_in); end
  def uri_is_oob?(uri); end
  def uri_is_postmessage?(uri); end
end

Signet::OAuth2::Client::OOB_MODES = T.let(T.unsafe(nil), Array)
Signet::VERSION = T.let(T.unsafe(nil), String)
