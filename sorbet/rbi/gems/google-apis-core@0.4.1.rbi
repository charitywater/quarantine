# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-apis-core` gem.
# Please instead update this file by running `bin/tapioca gem google-apis-core`.

# typed: true

module Google; end

module Google::Apis
  class << self
    def default_logger; end
    def logger; end
    def logger=(_arg0); end
    def rails_logger; end
  end
end

class Google::Apis::AuthorizationError < ::Google::Apis::Error; end
class Google::Apis::BatchError < ::Google::Apis::Error; end
class Google::Apis::ClientError < ::Google::Apis::Error; end

class Google::Apis::ClientOptions < ::Struct
  def application_name; end
  def application_name=(_); end
  def application_version; end
  def application_version=(_); end
  def log_http_requests; end
  def log_http_requests=(_); end
  def open_timeout_sec; end
  def open_timeout_sec=(_); end
  def proxy_url; end
  def proxy_url=(_); end
  def read_timeout_sec; end
  def read_timeout_sec=(_); end
  def send_timeout_sec; end
  def send_timeout_sec=(_); end
  def transparent_gzip_decompression; end
  def transparent_gzip_decompression=(_); end

  class << self
    def [](*_arg0); end
    def default; end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Google::Apis::Core; end

class Google::Apis::Core::ApiCommand < ::Google::Apis::Core::HttpCommand
  def initialize(method, url, body: T.unsafe(nil), client_version: T.unsafe(nil)); end

  def allow_form_encoding?; end
  def check_status(status, header = T.unsafe(nil), body = T.unsafe(nil), message = T.unsafe(nil)); end
  def client_version; end
  def client_version=(_arg0); end
  def decode_response_body(content_type, body); end
  def prepare!; end
  def request_object; end
  def request_object=(_arg0); end
  def request_representation; end
  def request_representation=(_arg0); end
  def response_class; end
  def response_class=(_arg0); end
  def response_representation; end
  def response_representation=(_arg0); end

  private

  def extract_v1_error_details(error); end
  def extract_v2_error_details(error); end
  def normalize_fields_param(fields); end
  def parse_error(body); end
  def set_api_client_header; end
  def set_user_project_header; end
end

Google::Apis::Core::ApiCommand::ERROR_REASON_MAPPING = T.let(T.unsafe(nil), Hash)
Google::Apis::Core::ApiCommand::FIELDS_PARAM = T.let(T.unsafe(nil), String)
Google::Apis::Core::ApiCommand::JSON_CONTENT_TYPE = T.let(T.unsafe(nil), String)

class Google::Apis::Core::BaseService
  include ::Google::Apis::Core::Logging

  def initialize(root_url, base_path, client_name: T.unsafe(nil), client_version: T.unsafe(nil)); end

  def authorization; end
  def authorization=(authorization); end
  def base_path; end
  def base_path=(_arg0); end
  def batch(options = T.unsafe(nil)); end
  def batch_path; end
  def batch_path=(_arg0); end
  def batch_upload(options = T.unsafe(nil)); end
  def client; end
  def client=(_arg0); end
  def client_name; end
  def client_name=(_arg0); end
  def client_options; end
  def client_options=(_arg0); end
  def client_version; end
  def client_version=(_arg0); end
  def fetch_all(max: T.unsafe(nil), items: T.unsafe(nil), cache: T.unsafe(nil), response_page_token: T.unsafe(nil), &block); end
  def http(method, url, params: T.unsafe(nil), body: T.unsafe(nil), download_dest: T.unsafe(nil), options: T.unsafe(nil), &block); end
  def request_options; end
  def request_options=(_arg0); end
  def root_url; end
  def root_url=(_arg0); end
  def upload_path; end
  def upload_path=(_arg0); end

  protected

  def apply_command_defaults(_command); end
  def execute_or_queue_command(command, &callback); end
  def make_download_command(method, path, options); end
  def make_simple_command(method, path, options); end
  def make_upload_command(method, path, options); end

  private

  def batch?; end
  def current_batch; end
  def end_batch; end
  def new_client; end
  def start_batch(cmd); end
  def user_agent; end
end

class Google::Apis::Core::BaseUploadCommand < ::Google::Apis::Core::ApiCommand
  def prepare!; end
  def release!; end
  def upload_content_type; end
  def upload_content_type=(_arg0); end
  def upload_io; end
  def upload_io=(_arg0); end
  def upload_source; end
  def upload_source=(_arg0); end

  private

  def streamable?(upload_source); end
end

Google::Apis::Core::BaseUploadCommand::CONTENT_TYPE_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::BaseUploadCommand::UPLOAD_CONTENT_LENGTH = T.let(T.unsafe(nil), String)
Google::Apis::Core::BaseUploadCommand::UPLOAD_CONTENT_TYPE_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::BaseUploadCommand::UPLOAD_PROTOCOL_HEADER = T.let(T.unsafe(nil), String)

class Google::Apis::Core::BatchCommand < ::Google::Apis::Core::HttpCommand
  def initialize(method, url); end

  def add(call, &block); end

  protected

  def decode_response_body(content_type, body); end
  def ensure_valid_command(command); end
  def header_to_id(content_id); end
  def id_to_header(call_id); end
  def prepare!; end
  def split_parts(body, boundary); end
end

Google::Apis::Core::BatchCommand::MULTIPART_MIXED = T.let(T.unsafe(nil), String)

class Google::Apis::Core::BatchUploadCommand < ::Google::Apis::Core::BatchCommand
  def ensure_valid_command(command); end
  def prepare!; end
end

class Google::Apis::Core::CallDeserializer
  def to_http_response(call_response); end

  protected

  def split_header_and_body(response); end
end

class Google::Apis::Core::CallSerializer
  def to_part(call); end

  protected

  def build_body(call); end
  def build_head(call); end
end

class Google::Apis::Core::CompositeIO
  def initialize(*ios); end

  def length; end
  def pos; end
  def pos=(pos); end
  def read(length = T.unsafe(nil), buf = T.unsafe(nil)); end
  def rewind; end
  def size; end
end

class Google::Apis::Core::DownloadCommand < ::Google::Apis::Core::ApiCommand
  def download_dest; end
  def download_dest=(_arg0); end
  def execute_once(client, &block); end
  def prepare!; end
  def release!; end
end

Google::Apis::Core::DownloadCommand::OK_STATUS = T.let(T.unsafe(nil), Array)
Google::Apis::Core::DownloadCommand::RANGE_HEADER = T.let(T.unsafe(nil), String)

class Google::Apis::Core::FilePart
  def initialize(io, header = T.unsafe(nil)); end

  def to_io(boundary); end
end

module Google::Apis::Core::Hashable
  def to_h; end

  class << self
    def process_value(val); end
  end
end

class Google::Apis::Core::HttpCommand
  include ::Google::Apis::Core::Logging

  def initialize(method, url, body: T.unsafe(nil)); end

  def allow_form_encoding?; end
  def apply_request_options(req_header); end
  def authorization_refreshable?; end
  def body; end
  def body=(_arg0); end
  def check_status(status, header = T.unsafe(nil), body = T.unsafe(nil), message = T.unsafe(nil)); end
  def connection; end
  def connection=(_arg0); end
  def decode_response_body(_content_type, body); end
  def error(err, rethrow: T.unsafe(nil), &block); end
  def execute(client); end
  def execute_once(client); end
  def header; end
  def header=(_arg0); end
  def method; end
  def method=(_arg0); end
  def options; end
  def options=(_arg0); end
  def params; end
  def params=(_arg0); end
  def prepare!; end
  def process_response(status, header, body); end
  def query; end
  def query=(_arg0); end
  def refresh_authorization; end
  def release!; end
  def success(result, &block); end
  def url; end
  def url=(_arg0); end

  private

  def form_encoded?; end
  def map_http_status(http_status); end
  def normalize_query_value(v); end
  def normalize_query_values(input); end
  def opencensus_begin_span; end
  def opencensus_end_span; end
  def safe_object_representation(obj); end
  def safe_response_representation(http_res); end
end

Google::Apis::Core::HttpCommand::RETRIABLE_ERRORS = T.let(T.unsafe(nil), Array)
Google::Apis::Core::HttpCommand::UNSAFE_CLASS_NAMES = T.let(T.unsafe(nil), Array)

module Google::Apis::Core::JsonObjectSupport
  mixes_in_class_methods ::Google::Apis::Core::JsonObjectSupport::ClassMethods

  def to_json(*a); end

  class << self
    def included(base); end
  end
end

module Google::Apis::Core::JsonObjectSupport::ClassMethods
  def from_json(json); end
end

class Google::Apis::Core::JsonPart
  def initialize(value, header = T.unsafe(nil)); end

  def to_io(boundary); end
end

class Google::Apis::Core::JsonRepresentation < ::Representable::Decorator
  include ::Representable::Hash
  include ::Representable::JSON
  include ::Google::Apis::Core::JsonRepresentationSupport
  extend ::Representable::JSON::ClassMethods
  extend ::Google::Apis::Core::JsonRepresentationSupport::JsonSupport
end

module Google::Apis::Core::JsonRepresentationSupport
  mixes_in_class_methods ::Google::Apis::Core::JsonRepresentationSupport::JsonSupport

  class << self
    def included(base); end
  end
end

module Google::Apis::Core::JsonRepresentationSupport::JsonSupport
  def collection(name, options = T.unsafe(nil)); end
  def getter_fn(name); end
  def hash(name = T.unsafe(nil), options = T.unsafe(nil)); end
  def if_fn(name); end
  def property(name, options = T.unsafe(nil)); end
  def set_default_options(name, options); end
end

module Google::Apis::Core::Logging
  def logger; end
end

class Google::Apis::Core::Multipart
  def initialize(content_type: T.unsafe(nil), boundary: T.unsafe(nil)); end

  def add_json(body, content_id: T.unsafe(nil)); end
  def add_upload(upload_io, content_type: T.unsafe(nil), content_id: T.unsafe(nil)); end
  def assemble; end
  def content_type; end
end

Google::Apis::Core::Multipart::MULTIPART_RELATED = T.let(T.unsafe(nil), String)

class Google::Apis::Core::MultipartUploadCommand < ::Google::Apis::Core::BaseUploadCommand
  def prepare!; end
end

Google::Apis::Core::MultipartUploadCommand::MULTIPART_PROTOCOL = T.let(T.unsafe(nil), String)
Google::Apis::Core::MultipartUploadCommand::MULTIPART_RELATED = T.let(T.unsafe(nil), String)

class Google::Apis::Core::PagedResults
  include ::Enumerable

  def initialize(service, max: T.unsafe(nil), items: T.unsafe(nil), cache: T.unsafe(nil), response_page_token: T.unsafe(nil), &block); end

  def each; end
  def last_result; end
end

class Google::Apis::Core::RawUploadCommand < ::Google::Apis::Core::BaseUploadCommand
  def prepare!; end
end

Google::Apis::Core::RawUploadCommand::RAW_PROTOCOL = T.let(T.unsafe(nil), String)

class Google::Apis::Core::ResumableUploadCommand < ::Google::Apis::Core::BaseUploadCommand
  def execute_once(client, &block); end
  def prepare!; end
  def process_response(status, header, body); end
  def send_query_command(client); end
  def send_start_command(client); end
  def send_upload_command(client); end
end

Google::Apis::Core::ResumableUploadCommand::BYTES_RECEIVED_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::QUERY_COMMAND = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::RESUMABLE = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::START_COMMAND = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::STATUS_ACTIVE = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::STATUS_CANCELLED = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::STATUS_FINAL = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::UPLOAD_COMMAND = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::UPLOAD_COMMAND_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::UPLOAD_OFFSET_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::UPLOAD_STATUS_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::ResumableUploadCommand::UPLOAD_URL_HEADER = T.let(T.unsafe(nil), String)
Google::Apis::Core::VERSION = T.let(T.unsafe(nil), String)

class Google::Apis::Error < ::StandardError
  def initialize(err, status_code: T.unsafe(nil), header: T.unsafe(nil), body: T.unsafe(nil)); end

  def backtrace; end
  def body; end
  def header; end
  def inspect; end
  def status_code; end
end

Google::Apis::OS_VERSION = T.let(T.unsafe(nil), String)
class Google::Apis::ProjectNotLinkedError < ::Google::Apis::Error; end
Google::Apis::ROOT = T.let(T.unsafe(nil), String)
class Google::Apis::RateLimitError < ::Google::Apis::Error; end
class Google::Apis::RedirectError < ::Google::Apis::Error; end

class Google::Apis::RequestOptions < ::Struct
  def api_format_version; end
  def api_format_version=(_); end
  def authorization; end
  def authorization=(_); end
  def header; end
  def header=(_); end
  def merge(options); end
  def normalize_unicode; end
  def normalize_unicode=(_); end
  def query; end
  def query=(_); end
  def quota_project; end
  def quota_project=(_); end
  def retries; end
  def retries=(_); end
  def skip_deserialization; end
  def skip_deserialization=(_); end
  def skip_serialization; end
  def skip_serialization=(_); end
  def use_opencensus; end
  def use_opencensus=(_); end

  class << self
    def [](*_arg0); end
    def default; end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Google::Apis::ServerError < ::Google::Apis::Error; end
class Google::Apis::TransmissionError < ::Google::Apis::Error; end
